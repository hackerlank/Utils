#include "math.h"
#include "../cutil.h"

struct item{
	int i;
	double j;
	long k;
};

void math_basic()
{
	char carray[10];
	static struct item items[] = {
		{1, 1.0, 1},
		{2, 2.0, 2},
		{3, 3.0, 3},
	};

	CU_ASSERT_EQUAL(countof(carray), 10);
	CU_ASSERT_EQUAL(countof(items), 3);

	CU_ASSERT_EQUAL(min(1+1,-1), -1);
	CU_ASSERT_EQUAL(max(0,2), 2);
}

void math_hex()
{
	CU_ASSERT_TRUE(ISDIGIT('0'));
	CU_ASSERT_TRUE(ISDIGIT('9'));
	CU_ASSERT_FALSE(ISDIGIT('a'));
	CU_ASSERT_FALSE(ISDIGIT('/'));

	CU_ASSERT_TRUE(ISXDIGIT('0'));
	CU_ASSERT_TRUE(ISXDIGIT('9'));
	CU_ASSERT_TRUE(ISXDIGIT('a'));
	CU_ASSERT_TRUE(ISXDIGIT('f'));
	CU_ASSERT_FALSE(ISXDIGIT('g'));
	CU_ASSERT_FALSE(ISXDIGIT('z'));
	CU_ASSERT_TRUE(ISXDIGIT('A'));
	CU_ASSERT_TRUE(ISXDIGIT('F'));
	CU_ASSERT_FALSE(ISXDIGIT('G'));
	CU_ASSERT_FALSE(ISXDIGIT('Z'));

	CU_ASSERT_EQUAL(XDIGIT_TO_NUM('0'), 0);
	CU_ASSERT_EQUAL(XDIGIT_TO_NUM('9'), 9);
	CU_ASSERT_EQUAL(XDIGIT_TO_NUM('a'), 10);
	CU_ASSERT_EQUAL(XDIGIT_TO_NUM('f'), 15);
	CU_ASSERT_EQUAL(XDIGIT_TO_NUM('A'), 10);
	CU_ASSERT_EQUAL(XDIGIT_TO_NUM('F'), 15);

	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('0', '0'), 0);
	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('0', '9'), 9);
	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('0', 'a'), 10);
	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('0', 'f'), 15);
	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('1', '0'), 16);
	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('1', 'f'), 31);
	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('9', 'a'), 154);
	CU_ASSERT_EQUAL(X2DIGITS_TO_NUM('f', 'f'), 255);

	CU_ASSERT_EQUAL(XNUM_TO_DIGIT(0), '0');
	CU_ASSERT_EQUAL(XNUM_TO_DIGIT(9), '9');
	CU_ASSERT_EQUAL(XNUM_TO_DIGIT(10), 'A');
	CU_ASSERT_EQUAL(XNUM_TO_DIGIT(15), 'F');
	CU_ASSERT_EQUAL(XNUM_TO_digit(10), 'a');
	CU_ASSERT_EQUAL(XNUM_TO_digit(15), 'f');
}